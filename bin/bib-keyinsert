#!/bin/bash
# Insert citekeys FirstAuthorYear:journal into bibtex file
#
# A letter suffix to the year in the citation key is kept
# or may be selected with the filename as 'file.bib:a'.
# Citation keys that vary only in case will not be changed.

function usage() {
    echo "$(basename $0): Insert citekeys FirstAuthorYear:journal into bibtex file"
    echo ""
    echo "The citation key can be overridden by a Citationkey field that is"
    echo "manually added to the bibtex entry.  Options -u and -d have the same"
    echo "output format 'count<tab>key'.  Call '$(basename $0) -u | cut -f2'"
    echo "for the list of (unique) keys without counts (-d for duplicate keys)."
    echo ""
    echo "USAGE: $(basename $0) bibfiles[:letter]"
    echo "Optional letter suffix for year."
    echo "Options:"
    echo "  -h  print this help"
    echo "  -n  show changes only"
    echo "  -i  ignore case when updating keys"
    echo "  -p  print actual keys"
    echo "  -d  print duplicate keys"
    echo "  -u  print unique keys"
    echo "  -q  do not print new key"
    exit $1
}
if [ $# -lt 1 ]; then usage 1; fi

# Default options.
INPLACE=1 # Update source file.
IGNORECASE=0 # Do not ignore case.
PRINTKEYS=0 # Do not print actual keys.
QUIET=0 # Do not show newly inserted keys.
PRINTFILE=-H # Print filename with actual keys.
PRINTDUPS=0 # Do not print duplicate keys.
PRINTUNIQ=0 # Do not print unique keys.

# Parse command line options.
for arg; do
    # With option '-h' print usage and exit.
    if [[ "$arg" == "-h" ]]; then usage 0; fi
    # With option '-n' only show diff.
    if [[ "$arg" == "-n" ]]; then INPLACE=0; fi
    # With option '-i' do not update keys that differ only in case.
    if [[ "$arg" == "-i" ]]; then IGNORECASE=1; fi
    # With option '-p' print actual keys.
    if [[ "$arg" == "-p" ]]; then PRINTKEYS=1; fi
    # With option '-d' print duplicate keys.
    if [[ "$arg" == "-d" ]]; then
        PRINTKEYS=1
        PRINTFILE=""
        PRINTDUPS=1
        PRINTUNIQ=0
    fi
    # With option '-u' print unique keys.
    if [[ "$arg" == "-u" ]]; then
        PRINTKEYS=1
        PRINTFILE=""
        PRINTUNIQ=1
        PRINTDUPS=0
    fi
    # With option '-1' do not print new keys.
    if [[ "$arg" == "-q" ]]; then QUIET=1; fi
done

# Do not print filename with '-p' for a single file.
if [[ $# -eq $((3 - $INPLACE + $IGNORECASE)) ]]; then
    PRINTFILE=""
fi
# Set ignore case option for diff.
if [[ $IGNORECASE -eq 1 ]]
then IGNORECASE=-i
else IGNORECASE=
fi


# Function to replace latex by utf8 characters
function latex_to_utf() { # echo text | latex_to_utf
    sed \
          -e '
              s/\\"{a}/ä/g
              s/\\"{o}/ö/g
              s/\\"{u}/ü/g
              s/\\"{i}/ı̈/g
              s/\\"{n}/n̈/g
              s/\\"{A}/Ä/g
              s/\\"{O}/Ö/g
              s/\\"{U}/Ü/g
              s/\\H{o}/ő/g
              s/\\H{u}/ű/g
              s/\\H{O}/Ő/g
              s/\\H{U}/Ű/g
              s/\\^{a}/â/g
              s/\\^{e}/ê/g
              s/\\^{i}/î/g
              s/\\^{o}/ô/g
              s/\\^{u}/û/g
              s/\\^{s}/ŝ/g
              s/\\^{A}/Â/g
              s/\\^{E}/Ê/g
              s/\\^{I}/Î/g
              s/\\^{O}/Ô/g
              s/\\^{U}/Û/g
              s/\\`{a}/à/g
              s/\\`{e}/è/g
              s/\\c{c}/ç/g
              s/\\k{a}/ą/g
              s/\\k{e}/ę/g
              s/\\k{A}/Ą/g
              s/\\k{E}/Ę/g
              s/\\r{a}/å/g
              s/\\r{A}/Å/g
              s/\\v{c}/č/g
              s/\\v{r}/ř/g
              s/\\v{s}/š/g
              s/\\v{z}/ž/g
              s/\\v{C}/Č/g
              s/\\v{R}/Ř/g
              s/\\v{S}/Š/g
              s/\\v{Z}/Ž/g
              s/\\~{a}/ã/g
              s/\\~{n}/ñ/g
              s/\\~{A}/Ã/g
              s/\\~{N}/Ñ/g
              s/{\\ss}/ß/g
              s/{\\l}/gł/g
              s/{\\L}/gŁ/g
              ' \
          -e "
              s/\\\\'{a}/á/g
              s/\\\\'{e}/é/g
              s/\\\\'{i}/í/g
              s/\\\\'{o}/ó/g
              s/\\\\'{u}/ú/g
              s/\\\\'{c}/ć/g
              s/\\\\'{n}/ń/g
              s/\\\\'{y}/ý/g
              s/\\\\'{A}/Á/g
              s/\\\\'{E}/É/g
              s/\\\\'{I}/Í/g
              s/\\\\'{O}/Ó/g
              s/\\\\'{U}/Ú/g
              "
}

# Function to remove latex macros such as \v{Z}.
# It treats nesting of curly braces up to third order.
function remove_macros() { # echo text | remove_macros
    sed -e 's/\\[a-z][a-z]*{\([^{}]*\)}/\1/g' \
        -e 's/\\[a-z][a-z]*{\([^{}]*{[^{}]*}[^{}]*\)}/\1/g' \
        -e 's/\\[a-z][a-z]*{\([^{}]*{[^{}]*{[^{}]*}[^{}]*}[^{}]*\)}/\1/g' \

}

# Function to get a field value from the first bib entry.
function getvalue() { # getvalue fieldname filename
    pattern="^ *$(sed 's/\(.\)/[\u\1\l\1]/' <<< $1) *="
    awk -v pattern="$pattern" '/^@/{nr+=1; if(nr>1) exit}
{if ($0 ~ pattern) print $0}' "$2" | grep -o '{[^{].*' | head -n1 \
    | latex_to_utf \
    | remove_macros \
    | sed -e 's/^{ *//;s/:*[}, ]*$//' \
          -e 's/[{}"\]//g'
}

# Function to replace non ascii characters / remove undesired characters.
function replace_chars() { # replace_chars string
    echo "$@" | sed \
        -e 'y/áéíóúć/aeiouc/;y/àèìòù/aeiou/' \
        -e 'y/ÁÉÍÓÚĆ/AEIOUC/;y/ÀÈÌÒÙ/AEIOU/' \
        -e 'y/âêîôûĉŝẑ/aeioucsz/;y/ÂÊÎÔÛĈŜẐ/AEIOUCSZ/' \
        -e 'y/čřšž/crsz/;y/ČŘŠŽ/CRSZ/' \
        -e 'y/ãñ/an/;y/ÃÑ/AN/' \
        -e 'y/å/a/;y/Å/A/' \
        -e 'y/ç/c/;y/Ç/C/' \
        -e 'y/ąęđł/aedl/;y/ĄĘĐŁ/AEDL/' \
        -e 's/ı̈/i/g;s/n̈/n/g' \
        -e 's/ä/ae/g;s/ö/oe/g;s/ü/ue/g' \
        -e 's/Ä/Ae/g;s/Ö/Oe/g;s/Ü/Ue/g' \
        -e 's/ő/oe/g;s/ű/ue/g' \
        -e 's/Ő/Oe/g;s/Ű/Ue/g' \
        -e 's/&//g;s/ß/ss/g' \
        -e 'y/‐−–/---/' \
        -e "s/[']//g;s/-$//"
}

# Function to update the citation key in a bibtex file.
function updatekey() { # updatekey citekey filename [-i]
    sed -r '/@([A-Za-z]+)* *\{.*,/s//@\1{'"${1//\//\\\/}"',/' $3 "$2"
}

# Function to find and print duplicates.
function duplicates() { # echo keys | duplicates
    if [ $PRINTDUPS -eq 1 ]
    then
        sort /dev/stdin | uniq -c | grep -v '^ *1 ' \
            | awk 'BEGIN{OFS="\t"}{print $1, $2}'
    elif [ $PRINTUNIQ -eq 1 ]
    then
        sort /dev/stdin | uniq -c | grep '^ *1 ' \
            | awk 'BEGIN{OFS="\t"}{print $1, $2}'
    else
        cat /dev/stdin
    fi
}


# Iterate bib files.
for bibfile in "$@"
do
    # Skip options.
    test "$bibfile" != "-n" || continue
    test "$bibfile" != "-i" || continue
    test "$bibfile" != "-p" || continue
    test "$bibfile" != "-d" || continue
    test "$bibfile" != "-u" || continue
    test "$bibfile" != "-q" || continue

    # Possibly select letter suffix from 'filename:letter'.
    letter=$(grep -o ':[a-z]*$' <<< "$bibfile" | head -n1)
    test -z "$letter" || bibfile=$(sed 's/:[a-z]*$//' <<< "$bibfile")

    # Replace »name.pdf« by »name.pdf.bib«.
    bibfile=$(sed 's/\.pdf$/&.bib/' <<< "$bibfile")
    pdffile=$(sed -n '/\.pdf\.bib$/{s//.pdf/;p}' <<< "$bibfile")

    # Skip if not a regular file.
    test -f "$bibfile" || {
        [[ "$bibfile" =~ ^- ]] \
            && echo "$(basename $0): $bibfile: Unknown option" >/dev/stderr \
            || echo "$(basename $0): $bibfile: File not found" >/dev/stderr;
        continue
    }

    if [ $PRINTKEYS -eq 1 ]
    then
        # Only print actual keys.
        grep $PRINTFILE '^ *@' "$bibfile" \
            | sed 's/@[^{]*{ */ /;s/ *, *$//;s/^ //'
        continue
    fi

    # Skip multi record files.
    nr=`sed -r '/@([A-Za-z]+)* *\{.*,/!d' "$bibfile" | wc -l`
    if [ $nr -gt 1 ]
    then
        echo "WARNING: Do not insert keys into multi record file '$bibfile'." >/dev/stderr
        continue
    fi

    # Obtain field values.
    citekey=$(getvalue Citationkey "$bibfile")
    fauthor=$(getvalue Author "$bibfile" \
        | sed 's/ and .*//;s/ *,.*//;s/.*[ ~]//')

    journal=$(getvalue Journal "$bibfile")
    journal=$(replace_chars "$journal" \
        | sed -r \
              -e 's/[,:].*//;s/OF //;s/\<[Tt][Hh][Ee]\>//' \
              -e 's/([A-Za-z]+) */\1/g;s/[a-z. ]|\\*&//g' \
              -e 's/ *[[({].*//')

    year=$(getvalue Year "$bibfile")

    # If not from 'filename:letter', search letter in filename.
    if [ -n "$year" ] && [ -z "$letter" ]
    then
        letter=$(echo "$bibfile" \
            | grep -o "_${year}[a-z]*_" | grep -o "[a-z]*" | head -n1)
    else
        letter="${letter#:}" # Remove preceding colon.
    fi

    # Create citation key.
    if [ -z "$citekey" ]
    then
        citekey="${fauthor}${year}${letter}:$(awk '{print tolower($0)}' <<< ${journal})"
        citekey=$(replace_chars "$citekey")
        citekey=${citekey%:} # Remove trailing colon if journal is unknown.
    fi

	# Create citekey from filename.
    #citekey=$(basename "${bibfile%.pdf.bib}" \
    #    | awk -F"_" '{print $1 $2 ":" tolower($3)}')

	# In case of changes insert citekey in bibtex file or print diff.
    if ! updatekey "$citekey" "$bibfile" \
        | diff -q $IGNORECASE "$bibfile" - >/dev/null 2>&1
    then
        if [ $INPLACE -eq 1 ]
        then
            # Update key and show result.
            updatekey "$citekey" "$bibfile" -i
            if [[ $QUIET -eq 0 ]]
            then
                grep -H ^@ "$bibfile"
            fi
        else
            # Show changes only.
            echo "=== changes for »$bibfile« ==="
            updatekey "$citekey" "$bibfile" | diff "$bibfile" - \
                | egrep -v '^([0-9]*[dac][0-9]*|---)$'
        fi
    fi
done \
    | duplicates
