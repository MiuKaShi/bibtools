#!/bin/bash
# Insert citekeys FirstAuthorYear:journal into bibtex file
#
# A letter suffix to the year in the citation key is kept
# or may be selected with the filename as 'file.bib:a'.

ALLOWED_CHARS="A-Za-z:0-9-"

function usage() {
    cat 1>&2 <<EOF
$(basename $0): Insert citekeys FirstAuthorYear:journal into bibtex file

The automatically created citation key can be overridden by a
Citationkey field that is manually added to the bibtex entry.
  Options -u and -d have the same output format 'count<tab>key'.
Call '$(basename $0) -u | cut -f2' for the list of (unique) keys
without counts (-d for duplicate keys).
  Journal names are abbreviated before creating the citation key.
To gain speed rather than stability, the option -s can be used.

USAGE: $(basename $0) bibfiles[:letter]
Optional letter suffix for year.
Options:
  -h  print this help
  -n  show changes only
  -i  ignore case when updating keys
  -p  print actual keys
  -d  print duplicate keys
  -u  print unique keys
  -q  do not print new key
  -s  skip journal abbreviation
EOF
    exit $1
}
if [ $# -lt 1 ]; then usage 1; fi

# Default options.
INPLACE=1 # Update source file.
IGNORECASE=0 # Do not ignore case.
PRINTKEYS=0 # Do not print actual keys.
QUIET=0 # Do not show newly inserted keys.
SKIPJ=0 # Skip journal abbreviation (faster).
PRINTFILE=-H # Print filename with actual keys.
PRINTDUPS=0 # Do not print duplicate keys.
PRINTUNIQ=0 # Do not print unique keys.

# Parse command line options.
for arg; do
    # With option '-h' print usage and exit.
    if [[ "$arg" == "-h" ]]; then usage 0; fi
    # With option '-n' only show diff.
    if [[ "$arg" == "-n" ]]; then INPLACE=0; fi
    # With option '-i' do not update keys that differ only in case.
    if [[ "$arg" == "-i" ]]; then IGNORECASE=1; fi
    # With option '-p' print actual keys.
    if [[ "$arg" == "-p" ]]; then PRINTKEYS=1; fi
    # With option '-d' print duplicate keys.
    if [[ "$arg" == "-d" ]]; then
        PRINTKEYS=1
        PRINTFILE=""
        PRINTDUPS=1
        PRINTUNIQ=0
    fi
    # With option '-u' print unique keys.
    if [[ "$arg" == "-u" ]]; then
        PRINTKEYS=1
        PRINTFILE=""
        PRINTUNIQ=1
        PRINTDUPS=0
    fi
    # With option '-q' do not print new keys.
    if [[ "$arg" == "-q" ]]; then QUIET=1; fi
    # With option '-s' skip journal abbreviation.
    if [[ "$arg" == "-s" ]]; then SKIPJ=1; fi
done

# Do not print filename with '-p' for a single file.
if [[ $# -eq $((3 - $INPLACE + $IGNORECASE)) ]]; then
    PRINTFILE=""
fi
# Set ignore case option for diff.
if [[ $IGNORECASE -eq 1 ]]
then IGNORECASE=-i
else IGNORECASE=
fi


# Function to get a field value from the first bib entry.
function getvalue() { # getvalue fieldname filename
    pattern="^ *$(sed 's/\(.\)/[\u\1\l\1]/' <<< $1) *="
    awk -v pattern="$pattern" '/^@/{nr+=1; if(nr>1) exit}
{if ($0 ~ pattern) print $0}' "$2" | grep -o '{[^{].*' | head -n1 \
    | sed 's/^{//;s/}[, ]*$//'
}

# Function to update the citation key in a bibtex file.
function updatekey() { # updatekey citekey filename [-i]
    sed -r '/@([A-Za-z]+)* *\{.*,?/s//@\1{'"${1//\//\\\/}"',/' $3 "$2"
}

# Function to find and print duplicates.
function duplicates() { # echo keys | duplicates
    if [ $PRINTDUPS -eq 1 ]
    then
        sort /dev/stdin | uniq -c | grep -v '^ *1 ' \
            | awk 'BEGIN{OFS="\t"}{print $1, $2}'
    elif [ $PRINTUNIQ -eq 1 ]
    then
        sort /dev/stdin | uniq -c | grep '^ *1 ' \
            | awk 'BEGIN{OFS="\t"}{print $2}'
    else
        cat /dev/stdin
    fi
}


# Iterate bib files.
for bibfile in "$@"
do
    # Skip options.
    test "$bibfile" != "-n" || continue
    test "$bibfile" != "-i" || continue
    test "$bibfile" != "-p" || continue
    test "$bibfile" != "-d" || continue
    test "$bibfile" != "-u" || continue
    test "$bibfile" != "-q" || continue
    test "$bibfile" != "-s" || continue

    # Possibly select letter suffix from 'filename:letter'.
    letter=$(grep -o ':[a-z]*$' <<< "$bibfile" | head -n1)
    test -z "$letter" || bibfile=$(sed 's/:[a-z]*$//' <<< "$bibfile")

    # Replace »name.pdf« by »name.pdf.bib«.
    bibfile=$(sed 's/\.pdf$/&.bib/' <<< "$bibfile")
    pdffile=$(sed -n '/\.pdf\.bib$/{s//.pdf/;p}' <<< "$bibfile")

    # Skip if not a regular file.
    test -f "$bibfile" || {
        [[ "$bibfile" =~ ^- ]] \
            && echo "$(basename $0): $bibfile: Unknown option" >/dev/stderr \
            || echo "$(basename $0): $bibfile: File not found" >/dev/stderr;
        continue
    }

    if [ $PRINTKEYS -eq 1 ]
    then
        # Only print actual keys.
        grep $PRINTFILE '^ *@' "$bibfile" \
            | sed 's/@[^{]*{ */ /;s/ *, *$//;s/^ //'
        continue
    fi

    # Skip multi record files.
    nr=`sed -r '/@([A-Za-z]+)* *\{.*,/!d' "$bibfile" | wc -l`
    if [ $nr -gt 1 ]
    then
        echo "WARNING: Do not insert keys into multi record file '$bibfile'." >/dev/stderr
        continue
    fi

    # Obtain field values.
    citekey=$(getvalue Citationkey "$bibfile")
    fauthor=$(getvalue Author "$bibfile" | bib-conva \
        | sed 's/ and .*//;s/ *,.*//;s/.*[ ~]//')

    if [ $SKIPJ -eq 1 ]
    then
        # Quick key creation without journal abbreviation.
        journal=$(getvalue Journal "$bibfile")
    else
        # Stable key creation with journal abbreviation.
        journal=$(bib-jabbr -j $(getvalue Journal "$bibfile"))
    fi
    journal=$(bib-conva <<< "$journal" \
        | sed -r \
              -e 's/[,:].*//;s/OF //;s/\<[Tt][Hh][Ee]\>//' \
              -e 's/([A-Za-z]+) */\1/g;s/[a-z. ]//g' \
              -e 's/ *[[({].*//')

    year=$(getvalue Year "$bibfile")

    # If not from 'filename:letter', search letter in filename.
    if [ -n "$year" ] && [ -z "$letter" ]
    then
        letter=$(echo "$bibfile" \
            | grep -o "_${year}[a-z]*_" | grep -o "[a-z]*" | head -n1)
    else
        letter="${letter#:}" # Remove preceding colon.
    fi

    # Create citation key.
    if [ -z "$citekey" ]
    then
        citekey="${fauthor}${year}${letter}:$(awk '{print tolower($0)}' <<< ${journal})"
        # Drop remaining non ascii characters and trailing dash or colon, merge dashes.
        citekey=$(echo "$citekey" | sed "s/[^$ALLOWED_CHARS]//g;s/[-:]$//;s/---*/-/g")
    fi

    # Create citekey from filename.
    #citekey=$(basename "${bibfile%.pdf.bib}" \
    #    | awk -F"_" '{print $1 $2 ":" tolower($3)}')

    # In case of changes insert citekey in bibtex file or print diff.
    if ! updatekey "$citekey" "$bibfile" \
        | diff -q $IGNORECASE "$bibfile" - >/dev/null 2>&1
    then
        if [ $INPLACE -eq 1 ]
        then
            # Update key and show result.
            updatekey "$citekey" "$bibfile" -i
            if [[ $QUIET -eq 0 ]]
            then
                grep -H ^@ "$bibfile"
            fi
        else
            # Show changes only.
            echo "=== changes for »$bibfile« ==="
            updatekey "$citekey" "$bibfile" | diff "$bibfile" - \
                | egrep -v '^([0-9]*[dac][0-9]*|---)$'
        fi
    fi
done \
    | duplicates
