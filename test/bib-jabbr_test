#!/bin/bash
# Test the bib-jabbr script.

export LC_COLLATE=C # Some tests require stable sorting.

# Variables for testing.
fullName="Journal of Physical Chemistry"
abbrName="J. Phys. Chem."
allNames="J. Phys. Chem.
Journal of Physical Chemistry
Unknown Journal"

# Functions to write example contents.
writeFileOne() {
  echo "  Journal   = {$fullName},"
  echo "  Journal   = {$abbrName},"
  echo "  Journal   = {Unknown Journal}"
}

writeFileTwo() {
  echo "@Article{$fullName,"
  echo "  NoJournal   = {$fullName}"
  echo "  NoJournal   = {$abbrName},"
}

# Initially create temporary files for all tests.
oneTimeSetUp() {
  fileOne=$(mktemp)
  fileTwo=$(mktemp)
}

# Finally remove temporary files for all tests.
oneTimeTearDown() {
  test ! -e $fileOne || rm $fileOne
  test ! -e $fileTwo || rm $fileTwo
}

# For each test reset the temporary file contents.
setUp() {
  writeFileOne > $fileOne
  writeFileTwo > $fileTwo
}

# _____________________________________________________________________________

testListOfJournalsNames() {
  assertEquals "$allNames" "$(bib-jabbr -p $fileOne)"
}

testListOfUnknownJournals() {
  assertEquals 'Unknown Journal' "$(bib-jabbr -u $fileOne)"
}

testJournalAbbreviation() {
  # First only print changes.
  assertEquals '5 lines change preview' '5' "$(bib-jabbr -n $fileOne | wc -l)"
  assertTrue   'no file change with -n'     "writeFileOne | diff - $fileOne"
  # Now do the abbreviation.
  bib-jabbr $fileOne
  assertFalse   'file was changed'        "writeFileOne | diff - $fileOne"
  assertEquals '2 short name found'   '2' "$(grep "$abbrName" $fileOne | wc -l)"
  # No further changes in subsequent call.
  assertEquals 'empty change preview' '' "$(bib-jabbr -n $fileOne)"
}

testJournalUnabbreviation() {
  # First only print changes.
  assertEquals '5 lines change preview' '5' "$(bib-jabbr -n -f $fileOne | wc -l)"
  assertTrue   'no file change with -n'     "writeFileOne | diff - $fileOne"
  # Now replace abbreviation by full name.
  bib-jabbr -f $fileOne
  assertFalse   'file was changed'        "writeFileOne | diff - $fileOne"
  assertEquals '2 long names found'  '2' "$(grep "$fullName" $fileOne | wc -l)"
  # No further changes in subsequent call.
  assertEquals 'empty change preview' '' "$(bib-jabbr -n -f $fileOne)"
}

# Test substitution of journal name given on the command line.
testJournalNameFromCmdLine() {
  fullJCP="Journal of Physical Chemistry"
  abbrJCP="J. Phys. Chem."
  assertTrue   'JPC is in list of journals'    "bib-jabbr -k | grep -q '^$fullJCP\$'"
  assertEquals 'Unchanged full title of JPC'   "$fullJCP" "$(bib-jabbr -j $fullJCP -f)"
  assertEquals 'Full title from abbreviation'  "$fullJCP" "$(bib-jabbr -j $abbrJCP -f)"
  assertEquals 'Unchanged abbreviation of JPC' "$abbrJCP" "$(bib-jabbr -j $abbrJCP)"
  assertEquals 'Full title from abbreviation'  "$abbrJCP" "$(bib-jabbr -j $fullJCP)"
}

# Test substitution of journal names with potential difficulties.
testAbbreviationOfSeveralJournals() {
  assertEquals 'Holzpreisstat. -- Rohholz' "$(bib-jabbr -j 'Holzpreisstatistik – Rohholz')"
  assertEquals 'Holzpreisstat. -- Rohholz' "$(bib-jabbr -j 'Holzpreisstatistik -- Rohholz')"
  assertEquals 'Astron. Astrophys.' "$(bib-jabbr -j 'Astronomy & Astrophysics')"
  assertEquals 'Astron. Astrophys.' "$(bib-jabbr -j 'Astronomy \\& Astrophysics')"
  assertEquals 'Z. Angew. Phys.'    "$(bib-jabbr -j 'Zeitschrift für Physik')"
  assertEquals '\"{O}kol. Landbau'  "$(bib-jabbr -j 'Ökologie und Landbau')"
  assertEquals '\"{O}kol. Landbau'  "$(bib-jabbr -j '\"{O}kologie und Landbau')"
  assertEquals "Rev. Arch\'{e}om."  "$(bib-jabbr -j 'Revue d’Archéometrie')"
  assertEquals "Rev. Arch\'{e}om."  "$(bib-jabbr -j "Revue d’Arch\'{e}ometrie")"
}

# Test substitution of journal names with potential difficulties.
testLongFormOfSeveralJournals() {
  assertEquals 'Holzpreisstatistik -- Rohholz' "$(bib-jabbr -f -j 'Holzpreisstat. – Rohholz')"
  assertEquals 'Holzpreisstatistik -- Rohholz' "$(bib-jabbr -f -j 'Holzpreisstat. -- Rohholz')"
  assertEquals 'Astronomy \& Astrophysics'  "$(bib-jabbr -f -j 'Astron. Astrophys.')"
  assertEquals 'Zeitschrift f\"{u}r Physik' "$(bib-jabbr -f -j 'Z. Angew. Phys.')"
  assertEquals '\"{O}kologie und Landbau'   "$(bib-jabbr -f -j 'Ökol. Landbau')"
  assertEquals '\"{O}kologie und Landbau'   "$(bib-jabbr -f -j '\"{O}kol. Landbau')"
  assertEquals "Revue d’Arch\'{e}ometrie"   "$(bib-jabbr -f -j 'Rev. Archéom.')"
  assertEquals "Revue d’Arch\'{e}ometrie"   "$(bib-jabbr -f -j "Rev. Arch\'{e}om.")"
}

# Test that non journal fields stay unchanged.
testUnchangedNonJournalFields() {
  bib-jabbr $fileTwo
  assertTrue 'file without journals unchanged' "writeFileTwo | diff - $fileTwo"
  bib-jabbr $fileTwo -f
  assertTrue 'file without journals unchanged' "writeFileTwo | diff - $fileTwo"
}

# Load and run shUnit2.
. shunit2/shunit2
