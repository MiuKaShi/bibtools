#!/bin/bash
# Test the bib-keyinsert script.

export LC_COLLATE=C # Some tests require stable sorting.

shopt -s expand_aliases

# Variables for testing.

# Functions to write example contents.
writeFileOne() {
  cat <<EOF
@Article{doi:10.1063/1.3276633,
  Author  = {Czakó, Gábor and Bowman, Joel M.},
  Journal = {Journal of Chemical Physics},
  Volume  = {131},
  Number  = {24},
  Pages   = {244302},
  Year    = {2009},
  Doi     = {10.1063/1.3276633}
}

EOF
}

writeFileTwo() {
  cat <<EOF
@Article{Czako2009:jcp,
@Article{Czako2009a:jcp,
@Article{Czako2009b:jcp,
@Article{Czako2009:jcp,
EOF
}
KEYS='Czako2009:jcp
Czako2009a:jcp
Czako2009b:jcp'
UNIQ='Czako2009a:jcp
Czako2009b:jcp'

writeFileThree() {
  cat <<EOF
@Incollection{Armentrout1996,
  Author                   = {Armentrout, P. B. and Kickel, Bernice L.},
  Journal                  = {Unsupported Field},
  Publisher                = {Springer, Dordrecht},
  Year                     = {1996},
  Editor                   = {Freiser, B. S.}
}

@Incollection{Valentine1984:me,
  Author                   = {Joan S. Valentine and Andrew R. Miksztal and Donald T. Sawyer},
  Year                     = {1984},
  Series                   = {Methods in Enzymology}
}

EOF
}

# Initially create temporary files for all tests.
oneTimeSetUp() {
  fileOne=$(mktemp -u -t tmp.XXXXXX).bib
  fileTwo=$(mktemp -u -t tmp.XXXXXX).bib
  fileThree=$(mktemp -u -t tmp.XXXXXX).bib
  touch $fileOne $fileTwo $fileThree
}

# Finally remove temporary files for all tests.
oneTimeTearDown() {
  test ! -e $fileOne || rm $fileOne
  test ! -e $fileTwo || rm $fileTwo
  test ! -e $fileThree || rm $fileThree
}

# For each test reset the temporary file contents.
setUp() {
  writeFileOne > $fileOne
  writeFileTwo > $fileTwo
  writeFileThree > $fileThree
  alias bib-keyinsert="bib-keyinsert -s" # Quicker.
}

# Function to extract key from bib-keyinsert output.
getkey() {
  cut -d'{' -f2 | sed 's/,$//'
}

# _____________________________________________________________________________

testJournalLongName() {
  unalias bib-keyinsert
  echo -e '@Article{,\nJournal = {Z. Angew. Phys.},' > $fileOne
  assertEquals ':zap' "$(bib-keyinsert $fileOne | getkey)"
  # Same journal in long name with different upper case letters.
  echo -e '@Article{,\nJournal = {Zeitschrift für Physik},' > $fileOne
  assertEquals ':zap' "$(bib-keyinsert $fileOne | getkey)"
  # Option to skip abbreviation test.
  echo -e '@Article{,\nJournal = {Zeitschrift für Physik},' > $fileOne
  assertEquals ':zp' "$(bib-keyinsert -s $fileOne | getkey)"
}

testJournalMaxFourLetters() {
  echo -e '@Article{,\nJournal = {Proc. Natl. Acad. Sci. U.S.A.},' > $fileOne
  assertEquals ':pnas' "$(bib-keyinsert $fileOne | getkey)"
}

testJournalAmpersand() {
  echo -e '@Article{,\nJournal = {Organic & Biomolecular Chemistry},' > $fileOne
  assertEquals ':obc' "$(bib-keyinsert $fileOne | getkey)"
  echo -e '@Article{,\nJournal = {A&A},' > $fileOne
  assertEquals ':aa' "$(bib-keyinsert $fileOne | getkey)"
  echo -e '@Article{,\nJournal = {A\&A},' > $fileOne
  assertEquals ':aa' "$(bib-keyinsert $fileOne | getkey)"
}

testJournalUmlaute() {
  echo -e '@Article{,\nJournal = {Polit. Ökol.},' > $fileOne
  assertEquals ':po' "$(bib-keyinsert $fileOne | getkey)"
  echo -e '@Article{,\nJournal = {\"{O}kologie und Landbau},' > $fileOne
  assertEquals ':ol' "$(bib-keyinsert $fileOne | getkey)"
}

testJournalDashes() {
  echo -e '@Article{,\nJournal = {Unknown-Journal},' > $fileOne
  assertEquals ':uj' "$(bib-keyinsert $fileOne | getkey)"
  echo -e '@Article{,\nJournal = {Unknown -- Journal},' > $fileOne
  assertEquals ':uj' "$(bib-keyinsert $fileOne | getkey)"
  echo -e '@Articl{,\nJournal = {Unknown – Journal},' > $fileOne
  assertEquals ':uj' "$(bib-keyinsert $fileOne | getkey)"
  echo -e '@Article{,\nJournal = {Unknown — Journal},' > $fileOne
  assertEquals ':uj' "$(bib-keyinsert $fileOne | getkey)"
  echo -e '@Article{,\nJournal = {Unknown---Journal},' > $fileOne
  assertEquals ':uj' "$(bib-keyinsert $fileOne | getkey)"
}

testFirstAuthorName() {
  echo -e '@Article{,\nAuthor = {Anderson, P. and Others R.},' > $fileOne
  assertEquals 'Anderson' "$(bib-keyinsert $fileOne | getkey)"
  echo -e '@Article{,\nAuthor = {Ångstr\\"{o}m, P. Q., R. Others},' > $fileOne
  assertEquals 'Aangstroem' "$(bib-keyinsert $fileOne | getkey)"
  echo -e '@Article{,\nAuthor = {P. Q. \\r{A}ngström, Others, R.},' > $fileOne
  assertEquals 'Aangstroem' "$(bib-keyinsert $fileOne | getkey)"
  echo -e '@Article{,\nAuthor = {Alvin Barrel-Name, and R. Others},' > $fileOne
  assertEquals 'Barrel-Name' "$(bib-keyinsert $fileOne | getkey)"
  echo -e '@Article{,\nAuthor = {Louis de Broglie and R. Others},' > $fileOne
  assertEquals 'Broglie' "$(bib-keyinsert $fileOne | getkey)"
  echo -e "@Article{,\nAuthor = {d'Hendecourt}," > $fileOne
  assertEquals 'dHendecourt' "$(bib-keyinsert $fileOne | getkey)"
  # TODO: Change to deBroglie or to Hendecourt desired?
}

testPublicationYear() {
  echo -e '@Article{,\nYear = {0},' > $fileOne
  assertEquals '0' "$(bib-keyinsert $fileOne | getkey)"
  echo -e '@Article{,\nYear = {2019},' > $fileOne
  assertEquals '2019' "$(bib-keyinsert $fileOne | getkey)"
  echo -e '@Article{,\nYear = {2019},' > $fileOne
  assertEquals '2019' "$(bib-keyinsert $fileOne | getkey)"
}

# Test all together with an example file.
testExampleBibtexFile() {
  assertEquals 'Czako2009:jcp' "$(bib-keyinsert $fileOne | getkey)"
  assertEquals '@Article{Czako2009:jcp,' "$(head -n1 $fileOne)"
  # Omit the colon without journal.
  sed '/^  Journal *=/d' -i $fileOne
  bib-keyinsert -q $fileOne
  assertEquals '@Article{Czako2009,' "$(head -n1 $fileOne)"
}

testQuietAndPrintChanges() {
  assertEquals '3 lines preview' '3' "$(bib-keyinsert -n $fileOne | wc -l)"
  assertEquals 'Unchanged file'  '@Article{doi:10.1063/1.3276633,' "$(head -n1 $fileOne)"
  assertEquals 'Quiet with -q'   '0' "$(bib-keyinsert -q $fileOne | wc -l)"
  assertEquals 'Updated key'     '@Article{Czako2009:jcp,' "$(head -n1 $fileOne)"
  assertEquals '0 lines preview' '0' "$(bib-keyinsert -n $fileOne | wc -l)"
}

testIgnoreCase() {
  sed -i '1s_doi:10.1063/1.3276633_czako2009:jcp_' $fileOne
  # If not case sensitive do not print and do not do changes.
  assertFalse 'No changes' "bib-keyinsert -n -i $fileOne | grep ."
  bib-keyinsert -q -i $fileOne
  assertEquals '@Article{czako2009:jcp,' "$(head -n1 $fileOne)"
  # If case sensitive do update the citation key.
  bib-keyinsert -q $fileOne
  assertEquals '@Article{Czako2009:jcp,' "$(head -n1 $fileOne)"
}

testYearWithLetter() {
  assertEquals 'Czako2009a:jcp' "$(bib-keyinsert ${fileOne}:a | getkey)"
  sed '/^  Journal *=/d' -i $fileOne
  assertEquals 'Czako2009c' "$(bib-keyinsert ${fileOne}:c | getkey)"
  assertEquals '@Article{Czako2009c,' "$(head -n1 $fileOne)"
  file=$(bib-name $fileOne | grep -o "[^']*.pdf.bib") # Filename from citation key.
  assertEquals 'Letter in filename'    '/tmp/Czako_2009c_.pdf.bib' "$file"
  assertEquals 'Test letter override'  '3' "$(bib-keyinsert -n $file:b | wc -l)"
  assertEquals 'Keep filename letter'  '0' "$(bib-keyinsert -n $file | wc -l)"
  mv $file ${file/c_/_} && file=${file/c_/_} # Remove letter from filename.
  assertEquals 'Otherwise drop letter' '3' "$(bib-keyinsert -n $file | wc -l)"
  mv $file $fileOne
}

testPrintKeys() {
  # Option -p prints 4 unsorted keys.
  assertEquals '4' "$(bib-keyinsert -p $fileTwo | wc -l)"
  assertEquals "$KEYS" "$(bib-keyinsert -p $fileTwo | cut -d' ' -f2 | sort -u)"
  # Option -d print duplicate key occuring two times.
  assertEquals '2' "$(bib-keyinsert -d $fileTwo | cut -f1)"
  assertEquals 'Czako2009:jcp' "$(bib-keyinsert -d $fileTwo | cut -f2)"
  # Option -u prints 2 unique keys.
  assertEquals "$UNIQ" "$(bib-keyinsert -u $fileTwo)"
}

testBadSigns() {
  echo -e "@Article{,\nAuthor = {One&Two'}," > $fileOne
  assertEquals 'OneTwo' "$(bib-keyinsert $fileOne | getkey)"
  echo -e '@Article{,\nAuthor = {(One"Two)},' > $fileOne
  assertEquals 'OneTwo' "$(bib-keyinsert $fileOne | getkey)"
  echo -e '@Article{,\nJournal = {Z. Phys. Chem. (Muenchen, Ger.)},' > $fileOne
  assertEquals ':zpc' "$(bib-keyinsert $fileOne | getkey)"
  echo -e '@Article{,\nYear = {Abc/d},' > $fileOne
  assertEquals 'Abcd' "$(bib-keyinsert $fileOne | getkey)"
}

testIncollection() {
  # Expect no changes in case of correct keys.
  assertFalse 'No changes expected' "bib-keyinsert -n $fileThree | grep ." \
      || bib-keyinsert -n $fileThree
  # Check that actually no changes are applied.
  bib-keyinsert $fileThree
  assertTrue 'No changes done' "writeFileThree | diff - $fileThree" \
      || writeFileThree | diff - $fileThree
}

# Load and run shUnit2.
. shunit2/shunit2
