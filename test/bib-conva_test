#!/bin/bash
# Test the bib-conva script.

source $(dirname $0)/character_arrays.sh

# Functions to check single character substitutions.
check_any() {
    # Check for multiple replacements on one line, drop backslash escaping.
    any=$(sed 's/\\\\/\\/g' <<< "$1 $1$1")
    ascii=$(sed 's/\\\\/\\/g' <<< "$2 $2$2")
    assertEquals "convert »$1« to »$2«" "$ascii" "$(bib-conva <<< "$any")"
}

# _____________________________________________________________________________

testUnicodeToAsciiConversion() {
  i=0; while [ $i -lt $ALL_COUNT ]; do i=$(($i + 1));
    check_any "${ALL_UNICODE_ARRAY[$i]}" "${ALL_ASCII_ARRAY[$i]}"
  done
}

testLatexToAsciiConversion() {
  i=0; while [ $i -lt $ALL_COUNT ]; do i=$(($i + 1));
    check_any "${ALL_LATEX_ARRAY[$i]}" "${ALL_ASCII_ARRAY[$i]}"
  done
}

MULTILINEMACRO='\\emph{This is an especially \\textbf{relevant
and important} piece of text with \\scshape{several}
} macros.'
STRIPPEDMULTILINEMACRO='This is an especially relevant
and important piece of text with several
 macros.'
testLatexMacroRemoval() {
  assertEquals 'strip single macro' 'keyword' \
      "$(bib-conva <<< "\\emph{keyword}")"
  assertEquals 'keep bibtex fiels' '  Field  = {keyword}' \
      "$(bib-conva <<< "  Field  = {\\emph{keyword}}")"
  assertEquals 'strip adjacent macros' 'keyword' \
      "$(bib-conva <<< "\\emph{key}\\emph{word}")"
  assertEquals 'strip nested macros' 'a special keyword' \
      "$(bib-conva <<< "\\emph{a \\textbf{special} keyword}")"
  assertEquals 'strip third order nesting' 'a special keyword' \
      "$(bib-conva <<< "\\emph{a \\textbf{spe\\c{c}ial} keyword}")"
  assertEquals 'characters and ampersand' 'Kalk & Russ' \
      "$(bib-conva <<< "Ka{\\l}k \\& Ru{\\ss}")"
  assertEquals 'strip multiline macro' "$STRIPPEDMULTILINEMACRO" \
      "$(bib-conva <<< "$MULTILINEMACRO")"
}

# Load and run shUnit2.
. shunit2/shunit2
